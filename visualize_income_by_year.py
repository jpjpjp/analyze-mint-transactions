# visualize_income_by_year.py
"""From an input of income data summarized
   by group per year, gnerate a set of visualizations
"""
import webbrowser
import os
import visualization_methods as vms

# Import the shared configuration file
import expenses_config as ec

# Name of the html report generated by this module
HTML_OUT = ec.REPORTS_PATH + "annual-income.html"
HTML_F = open(HTML_OUT, "w")

# Create a dataframe from the annual income  by group data file
df = vms.read_structured_transactions(
    ec.OUTPUT_INCOME_BY_SPENDING_BY_GROUP,
    ec.PATH_TO_YOUR_TRANSACTIONS,
    "Spending Group",
    "summarized income group data",
)


# year over year visualizations we may have different categories each year
# Create an assigned color for each category so the colors are consistent
colors = vms.assign_colors_to_groups(df)

# Iterate through the columns which are formatted "YEAR Amount"
for col in df.columns:
    year = col.split(" ", 1)[0]
    # Ignore years with dirty or incomplete data
    if int(year) < ec.IGNORE_YEARS_BEFORE:
        continue

    print("Visualizing income for year:" + year + "...")
    year_df = df[year + " Amount"]
    if not len(year_df):
        print("No data found for " + year)
        continue
    report_png = str(year) + "-spending-by-category.png"
    vms.visualize_expenses_by_group(
        year, year_df, colors, ec.REPORTS_PATH + report_png, spending=False
    )
    print("<image src=./" + report_png + ">", file=HTML_F)

# Build a "summary" dataframe that we can visulize as a table
sum_df = vms.build_summary_table(df)
print(sum_df.to_html(), file=HTML_F)

# Show the report in a webbrowser
HTML_F.close()
webbrowser.open(
    "file://" + os.path.realpath(HTML_OUT), new=2
)  # new=2: open in a new tab, if possible
